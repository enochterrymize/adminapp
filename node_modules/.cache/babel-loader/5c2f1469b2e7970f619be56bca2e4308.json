{"ast":null,"code":"import _defineProperty from\"/Volumes/Terry HD/workspace/projects_reactjs/admin/endless-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{GET_EMAILS,GET_ALL_EMAILS,GET_EMAIL_TYPES,UPDATE_EMAIL_TYPES}from'../constant/actionTypes';import{data}from'../data/email';var initial_state={allEmails:data,singleData:[],types:[],loading:false};export default(function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initial_state;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case GET_EMAILS:return _objectSpread({},state);case GET_ALL_EMAILS:return _objectSpread({},state,{allEmails:data});case GET_EMAIL_TYPES:var getTypes=action.payload;return _objectSpread({},state,{loading:true,types:getTypes});case UPDATE_EMAIL_TYPES:var singleEmail=state.allEmails.reduce(function(cartAcc,item){if(item.id===action.payload.id){action.payload.favourite=!action.payload.favourite;cartAcc.push(_objectSpread({},item,{favourite:action.payload.favourite}));}else{cartAcc.push(item);}return cartAcc;},[]);return _objectSpread({},state,{loading:true,singleData:singleEmail,allEmails:singleEmail});default:return _objectSpread({},state);}});","map":{"version":3,"sources":["/Volumes/Terry HD/workspace/projects_reactjs/admin/endless-app/src/reducers/email.reducer.js"],"names":["GET_EMAILS","GET_ALL_EMAILS","GET_EMAIL_TYPES","UPDATE_EMAIL_TYPES","data","initial_state","allEmails","singleData","types","loading","state","action","type","getTypes","payload","singleEmail","reduce","cartAcc","item","id","favourite","push"],"mappings":"m9BAAA,OACIA,UADJ,CAEIC,cAFJ,CAGIC,eAHJ,CAIIC,kBAJJ,KAKO,yBALP,CAOA,OAASC,IAAT,KAAqB,eAArB,CAEA,GAAMC,CAAAA,aAAa,CAAG,CAClBC,SAAS,CAAEF,IADO,CAElBG,UAAU,CAAE,EAFM,CAGlBC,KAAK,CAAE,EAHW,CAIlBC,OAAO,CAAE,KAJS,CAAtB,CAOA,eAAe,UAAmC,IAAlCC,CAAAA,KAAkC,2DAA1BL,aAA0B,IAAXM,CAAAA,MAAW,2CAC9C,OAAQA,MAAM,CAACC,IAAf,EAEI,IAAKZ,CAAAA,UAAL,CACI,wBAAYU,KAAZ,EAEJ,IAAKT,CAAAA,cAAL,CACI,wBAAYS,KAAZ,EAAmBJ,SAAS,CAAEF,IAA9B,GAEJ,IAAKF,CAAAA,eAAL,CACI,GAAMW,CAAAA,QAAQ,CAAGF,MAAM,CAACG,OAAxB,CACA,wBAAYJ,KAAZ,EAAmBD,OAAO,CAAE,IAA5B,CAAkCD,KAAK,CAAEK,QAAzC,GAEJ,IAAKV,CAAAA,kBAAL,CACI,GAAMY,CAAAA,WAAW,CAAGL,KAAK,CAACJ,SAAN,CAAgBU,MAAhB,CAAuB,SAACC,OAAD,CAAUC,IAAV,CAAmB,CAC1D,GAAIA,IAAI,CAACC,EAAL,GAAYR,MAAM,CAACG,OAAP,CAAeK,EAA/B,CAAmC,CAC/BR,MAAM,CAACG,OAAP,CAAeM,SAAf,CAA2B,CAACT,MAAM,CAACG,OAAP,CAAeM,SAA3C,CACAH,OAAO,CAACI,IAAR,kBAAkBH,IAAlB,EAAwBE,SAAS,CAAET,MAAM,CAACG,OAAP,CAAeM,SAAlD,IACH,CAHD,IAGO,CACHH,OAAO,CAACI,IAAR,CAAaH,IAAb,EACH,CACD,MAAOD,CAAAA,OAAP,CACH,CARmB,CAQjB,EARiB,CAApB,CASA,wBAAYP,KAAZ,EAAmBD,OAAO,CAAE,IAA5B,CAAkCF,UAAU,CAAEQ,WAA9C,CAA2DT,SAAS,CAAES,WAAtE,GAEJ,QAAS,wBAAYL,KAAZ,EAxBb,CA0BH,CA3BD","sourcesContent":["import {\n    GET_EMAILS,\n    GET_ALL_EMAILS,\n    GET_EMAIL_TYPES,\n    UPDATE_EMAIL_TYPES\n} from '../constant/actionTypes';\n\nimport { data } from '../data/email';\n\nconst initial_state = {\n    allEmails: data,\n    singleData: [],\n    types: [],\n    loading: false\n};\n\nexport default (state = initial_state, action) => {\n    switch (action.type) {\n\n        case GET_EMAILS:\n            return { ...state };\n\n        case GET_ALL_EMAILS:\n            return { ...state, allEmails: data };\n\n        case GET_EMAIL_TYPES:\n            const getTypes = action.payload;\n            return { ...state, loading: true, types: getTypes };\n\n        case UPDATE_EMAIL_TYPES:\n            const singleEmail = state.allEmails.reduce((cartAcc, item) => {\n                if (item.id === action.payload.id) {\n                    action.payload.favourite = !action.payload.favourite\n                    cartAcc.push({ ...item, favourite: action.payload.favourite })\n                } else {\n                    cartAcc.push(item)\n                }\n                return cartAcc;\n            }, [])\n            return { ...state, loading: true, singleData: singleEmail, allEmails: singleEmail };\n\n        default: return { ...state };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}